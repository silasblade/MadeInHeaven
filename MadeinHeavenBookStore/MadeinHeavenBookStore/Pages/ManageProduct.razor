@page "/admin/manageproduct"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using MadeinHeavenBookStore.Models
@using MadeinHeavenBookStore.Models.MVCService
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authorization;
@using MadeinHeavenBookStore.Controllers.Services;
@inject ProductService ProductService 
@inject ShopService ShopService 
@inject ShopAPIService ShopAPIService 
@layout SubMainLayout

@inject IToastService toastService
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@if (IsUserAuthorized || IsUserAuthorizedMod)
{

    <div class="container">
        <div class="row">
            <div class="col-lg-12 card-margin">
                <div class="card search-form">
                    <div class="card-body p-0">
                            <div class="row">
                                <div class="col-12">
                                    <div class="row no-gutters">
                                        <div class="col-lg-3 col-md-3 col-sm-12 p-0">
                                            <select @onchange="CategoryPage">
                                                <option>All</option>
                                                @foreach(var cat in Categories)
                                                {
                                                  <option>@cat.Name</option>  
                                                }
                                                
                                            </select>
                                        </div>
                                        <div class="col-lg-8 col-md-6 col-sm-12 p-0">
                                            <input type="text" placeholder="Search..." class="form-control" @bind="search">
                                        </div>
                                        <div class="col-lg-1 col-md-3 col-sm-12 p-0">
                                            <button @onclick="Update">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="card card-margin">
                    <div class="card-body">
                        <div class="row search-body">
                            <div class="col-lg-12">
                                <div class="search-result">
                                    <div class="result-header">
                                        <div class="row">
                                            <div class="col-lg-6">
                                                <div class="records">Showing: <b>10</b> of <b>@totalItems</b> result</div>
                                            </div>
                                            <div class="col-lg-6">
                                                <div class="result-actions">
                                                    <div class="result-sorting">
                                                        <span>Sort By:</span>
                                                        <select @onchange="Reverts" class="form-control border-0" id="exampleOption">
                                                            <option value="1">Index (First-Final)</option>
                                                            <option value="2">Index (Final-First)</option>
                                                        </select>
                                                    </div>
                                                    <div class="result-views">
                                                        <a @onclick="() => AddNewProduct()" class="btn btn-outline-primary">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                                                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"></path>
                                                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"></path>
                                                            </svg>
                                                            Add New
                                                        </a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="result-body">
                                        <div class="table-responsive">
                                            <table class="table widget-26">
                                                <tbody>

                                                    @foreach (var item in Products)
                                                    {
                                                        <tr>
                                                            <td>
                                                                <div class="">
                                                                    <img src="@item.imageurl1" height="70px" alt="Company" />
                                                                </div>
                                                            </td>
                                                            <td>
                                                                <div class="widget-26-job-title">
                                                                    <a href="#">@item.NameProduct</a>
                                                                    <p class="m-0"><a href="#" class="employer-name"></a> <span class="text-muted time">@item.Author</span></p>
                                                                </div>
                                                            </td>
                                                            <td>
                                                                <div class="widget-26-job-info">

                                                                    @foreach (var cat in item.Categories)
                                                                    {
                                                                        <p class="type m-0">@cat.Name</p>
                                                                        @* <p class="text-muted m-0">in <span class="location">London, UK</span></p> *@
                                                                    }

                                                                </div>
                                                            </td>
                                                            <td>
                                                                <div class="widget-26-job-salary">@item.Inventory books left</div>
                                                            </td>
                                                            <td>
                                                                <div class="widget-26-job-category bg-soft-base">
                                                                    <i class="indicator bg-base"></i>
                                                                    <span>VNĐ @item.Price &nbsp; &nbsp;</span>
                                                                </div>
                                                            </td>
                                                            <td>


                                                                <div class="d-flex justify-content-between">
                                                                    <a href="@GetEditUrl(item.IdProduct)" type="button" class="btn btn-outline-success">
                                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                                                            <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z"></path>
                                                                        </svg>

                                                                    </a>

                                                                    <button @onclick="() => DeleteProduct(item.IdProduct)" class="btn btn-outline-danger">
                                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
                                                                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"></path>
                                                                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"></path>
                                                                        </svg>

                                                                    </button>
                                                                </div
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                         <nav class="d-flex justify-content-center">
		<ul class="pagination pagination-base pagination-boxed pagination-square mb-0">
			@if (currentPage != 1)
			{
				<li class="page-item">
					<button @onclick="@(c => ChangePage(currentPage - 1))" class="page-link no-border">
						<span aria-hidden="true">«</span>
						<span class="sr-only">Previous</span>
					</button>
				</li>
			}

			
			@for (int i = 1; i <= Math.Ceiling((double)totalItems / itemsPerPage); i++)
			{
				int pageNumber = i; // Local variable to capture the current value of i
				if(currentPage == i)
				{
					<li class="page-item active"><button class="page-link no-border" @onclick="@(c => ChangePage(pageNumber))">@i</button></li>

				}
				else
				{
					<li class="page-item"><button class="page-link no-border" @onclick="@(c => ChangePage(pageNumber))">@i</button></li>

				}
			}
			@if (currentPage != Math.Ceiling((double)totalItems / itemsPerPage))
			{
				<li class="page-item">
					<button @onclick="@(c => ChangePage(currentPage + 1))" class="page-link no-border">
						<span aria-hidden="true">»</span>
						<span class="sr-only">Next</span>
					</button>
				</li>
			}
			
		</ul>
	</nav>
                    </div>
                </div>
            </div>
        </div>
       
    </div>
    <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.bundle.min.js"></script>
    <script type="text/javascript"></script>
  

}
else
{
    <p>You are not able to view this content.</p>
}

@code {
    public int currentPage = 1;
    public int itemsPerPage = 10;
    public int totalItems;
    public int min;
    public int max;
    public string cate =  "";
    public string search = "";

    private bool IsUserAuthorized;
        private bool IsUserAuthorizedMod;

    public string selectedOption;
    public List<Category> Categories = new List<Category>();
    public List<Product> Products = new List<Product>();
    public List<Product> productsnopage = new List<Product>();

    public List<Category> ProCat = new List<Category>();


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        IsUserAuthorized = authState.User.IsInRole("Admin");
        IsUserAuthorizedMod = authState.User.IsInRole("Mod");
        await Update();
    }

    public async Task Update()
    {
        Categories = await ShopService.GetCategories();
        productsnopage = await ShopService.ShopProduct(cate, search, max, min);
        totalItems = productsnopage.Count();
        Products = await ShopService.GetPagedProducts(cate, search, max, min, currentPage, itemsPerPage);
    }

    public async Task ChangePage(int page)
    {
        currentPage = page;
        await Update();
    }

    public async Task Reverts()
    {
        Products.Reverse();
    }


    public async Task CategoryPage(ChangeEventArgs cat)
    {
        cate = cat.Value.ToString();
        if (cate == "All") cate = "";
        await Update();
	}

    public async Task DeleteProduct(int id)
    {
        ProductService.DeleteProduct(id);
        await Update();
    }

    public async Task AddNewProduct()
    {
        ShopAPIService.AddProduct();
        await Update();
    }

  
     public string GetEditUrl(int id) => $"/admin/manageproduct/editproduct/{id}";
}
