@page "/shop"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using MadeinHeavenBookStore.Models.MVCService
@using MadeinHeavenBookStore.Models
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authorization;
@inject ShopService ShopService;
@inject IToastService toastService
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout SubMainLayout



	<div class="container">
<div class="flex-w flex-l-m filter-tope-group m-tb-10">
		<button class="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 how-active1" data-filter="*" @onclick="@(c => CategoryPage(""))">
			All Products
		</button>
	@foreach(var item in categories)
		{

			<button class="stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5" @onclick="@(c => CategoryPage(item.Name))">
				@item.Name
			</button>

		}
		
</div>



			<!-- Search product -->
			
			<div class=" panel-search w-full p-t-10 p-b-15">
				<form @onsubmit="@(c => Update())">
				<div class="bor8 dis-flex p-l-15">
					
						<button type="submit"  class="size-113 flex-c-m fs-16 cl2 hov-cl1 trans-04">
							<i class="zmdi zmdi-search"></i>
						</button>

						<input class="mtext-107 cl2 size-114 plh2 p-r-15" type="text" @bind="@search" placeholder="Search">
				</div>
				</form>
			</div>

	<div class="panel-search w-full p-t-10 p-b-15" style="display: flex; align-items: center;">
		<a style="margin-right: 10px;">From</a>
		<input @bind="min" class="form-control" type="text" placeholder="Min">
		<a  style="margin-left: 10px; margin-right: 10px;">To</a>
		<input @bind="max" class="form-control" type="text" placeholder="Max">
	</div>

			
		

		

		<div class="row isotope-grid">
		@foreach (var product in products)
			{
			<div class="col-sm-6 col-md-4 col-lg-3 p-b-35 isotope-item women">
				<!-- Block2 -->
				<div class="block2">
					<div class="block2-pic hov-img0">
						<img src="@product.imageurl1" alt="IMG-PRODUCT">


 														
 								<button class="block2-btn flex-c-m stext-103 cl2 size-102 bg0 bor2 hov-btn1 p-lr-15 trans-04" @onclick="@(c => { AddtoCart(product.IdProduct); toastService.ShowSuccess("Added product to Cart"); })">Add to Cart</button>
 						
					</div>

					<div class="block2-txt flex-w flex-t p-t-14">
						<div class="block2-txt-child1 flex-col-l ">
								<button @onclick="@(c => ViewProduct(product.IdProduct))"  class="stext-104 cl4 hov-cl1 trans-04 js-name-b2 p-b-6">
									@product.NameProduct
							</button>

							<span class="stext-105 cl3">
								@product.Price
							</span>
						</div>

						<div class="block2-txt-child2 flex-r p-t-3">
								<a @onclick=@(c => AddtoWishlist(product.IdProduct)) class="btn-addwish-b2 dis-block pos-relative">
								<img class="icon-heart1 dis-block trans-04" src="/images/icons/icon-heart-01.png" alt="ICON">
								<img class="icon-heart2 dis-block trans-04 ab-t-l" src="/images/icons/icon-heart-02.png" alt="ICON">
							</a>
						</div>
					</div>
				</div>
			</div>
			}
		</div>
	<nav class="d-flex justify-content-center">
		<ul class="pagination pagination-base pagination-boxed pagination-square mb-0">
			@if (currentPage != 1)
			{
				<li class="page-item">
					<button @onclick="@(c => ChangePage(currentPage - 1))" class="page-link no-border">
						<span aria-hidden="true">«</span>
						<span class="sr-only">Previous</span>
					</button>
				</li>
			}

			
			@for (int i = 1; i <= Math.Ceiling((double)totalItems / itemsPerPage); i++)
			{
				int pageNumber = i; // Local variable to capture the current value of i
				if(currentPage == i)
				{
					<li class="page-item active"><button class="page-link no-border" @onclick="@(c => ChangePage(pageNumber))">@i</button></li>

				}
				else
				{
					<li class="page-item"><button class="page-link no-border" @onclick="@(c => ChangePage(pageNumber))">@i</button></li>

				}
			}
			@if (currentPage != Math.Ceiling((double)totalItems / itemsPerPage))
			{
				<li class="page-item">
					<button @onclick="@(c => ChangePage(currentPage + 1))" class="page-link no-border">
						<span aria-hidden="true">»</span>
						<span class="sr-only">Next</span>
					</button>
				</li>
			}
			
		</ul>
	</nav>
</div>








@code {
	public int min;
	public int max;
	public int currentPage = 1;
	public int itemsPerPage = 20; // Adjust this based on your design
	public int totalItems;
	public List<Product> products = new List<Product>();
	public List<Product> productsnopage = new List<Product>();
	public List<Category> categories = new List<Category>();
	private bool IsUserAuthorized;
	public string cate =  "";
	public string search = "";

	public void ViewProduct(int id)
	{
		NavigationManager.NavigateTo("ProductDetail/ProductDetail/"+id, true);
	}

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		IsUserAuthorized = authState.User.IsInRole("Admin");
		await Update();
	}

	public async Task Update()
	{
		categories = await ShopService.GetCategories();
		productsnopage = await ShopService.ShopProduct(cate, search, max, min);
		totalItems = productsnopage.Count();
		products = await ShopService.GetPagedProducts(cate, search, max, min, currentPage, itemsPerPage);
		Console.WriteLine(cate + search + currentPage + itemsPerPage);
	}

	public async Task ChangePage(int page)
	{
		currentPage = page;
		await Update();
	}

	public async Task CategoryPage(string cat)
	{
		cate = cat;
		await Update();
	}

	public async Task AddtoCart(int id)
	{
		
		await ShopService.AddToCart(id);
		await JSRuntime.InvokeVoidAsync("alert", "Add product to cart successfully");
		await Update();
	}

	public async Task AddtoWishlist(int id)
	{

		await ShopService.AddtoWishlist(id);
		await JSRuntime.InvokeVoidAsync("alert", "Add product to wishlist successfully");
		await Update();
	}


}
